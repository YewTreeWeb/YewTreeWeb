@use 'sass:meta';
@use 'sass:string';
@use './functions' as *;

// Target data tags.
@mixin data($tag, $data) {
  [data-#{$tag}*='#{$data}'] & {
    @content;
  }
}

// Sets the `max-width` and `max-height` of the element in one statement.
@mixin size($width, $height: $width, $type: null) {
  @if ($width !=null) {
    @if ($type== 'max' and $height !=0) {
      max-width: $width;
    } @else if ($type== 'min' and $height !=0) {
      min-width: $width;
    } @else {
      width: $width;
    }
  }

  @if ($height !=null) {
    @if ($type== 'max') {
      @if ($height !=0) {
        max-height: $height;
      } @else if ($height == 'fill') {
        max-height: 100vh;
        max-height: -webkit-fill-available;
      }
    } @else if ($type== 'min') {
      @if ($height !=0) {
        min-height: $height;
      } @else if ($height == 'fill') {
        min-height: 100vh;
        min-height: -webkit-fill-available;
      }
    } @else {
      @if ($height == 'fill') {
        height: 100vh;
        height: -webkit-fill-available;
      } @else {
        height: $height;
      }
    }
  }
}

/// Checks if a list does not contain any values.
///
/// @argument {list} $list
///   The list to check against.
///
/// @return {boolean}
///
/// @access private

@function _contains-falsy($list) {
  @each $item in $list {
    @if not $item {
      @return true;
    }
  }

  @return false;
}

/// Transforms shorthand to its shortest possible form.
///
/// @argument {list} $values
///   List of directional values.
///
/// @example scss
///   $values: _compact-shorthand(10px 20px 10px 20px);
///
///   // Output
///   $values: 10px 20px;
///
/// @return {list}
///
/// @access private

@function _compact-shorthand($values) {
  $output: null;

  $a: nth($values, 1);
  $b: if(length($values) < 2, $a, nth($values, 2));
  $c: if(length($values) < 3, $a, nth($values, 3));
  $d: if(length($values) < 2, $a, nth($values, if(length($values) < 4, 2, 4)));

  @if $a == 0 {
    $a: 0;
  }
  @if $b == 0 {
    $b: 0;
  }
  @if $c == 0 {
    $c: 0;
  }
  @if $d == 0 {
    $d: 0;
  }

  @if $a == $b and $a == $c and $a == $d {
    $output: $a;
  } @else if $a == $c and $b == $d {
    $output: $a $b;
  } @else if $b == $d {
    $output: $a $b $c;
  } @else {
    $output: $a $b $c $d;
  }

  @return $output;
}

/// Builds directional properties by parsing CSS shorthand values. For example,
/// a value of `10px null` will output top and bottom directional properties,
/// but the `null` skips left and right from being output.
///
/// @argument {string} $property
///   Base property.
///
/// @argument {string} $suffix
///   Suffix to append. Use `null` to omit.
///
/// @argument {list} $values
///   List of values to set for the property.
///
/// @example scss
///   .element {
///     @include _directional-property(border, width, null 5px);
///   }
///
///   // CSS Output
///   .element {
///     border-right-width: 5px;
///     border-left-width: 5px;
///   }
///
/// @require {function} _compact-shorthand
///
/// @require {function} _contains-falsy
///
/// @access private

@mixin _directional-property($property, $suffix, $values) {
  $top: $property + '-top' + if($suffix, '-#{$suffix}', '');
  $bottom: $property + '-bottom' + if($suffix, '-#{$suffix}', '');
  $left: $property + '-left' + if($suffix, '-#{$suffix}', '');
  $right: $property + '-right' + if($suffix, '-#{$suffix}', '');
  $all: $property + if($suffix, '-#{$suffix}', '');

  $values: _compact-shorthand($values);

  @if _contains-falsy($values) {
    @if nth($values, 1) {
      #{$top}: nth($values, 1);
    }

    @if length($values) == 1 {
      @if nth($values, 1) {
        #{$right}: nth($values, 1);
      }
    } @else {
      @if nth($values, 2) {
        #{$right}: nth($values, 2);
      }
    }

    @if length($values) == 2 {
      @if nth($values, 1) {
        #{$bottom}: nth($values, 1);
      }
      @if nth($values, 2) {
        #{$left}: nth($values, 2);
      }
    } @else if length($values) == 3 {
      @if nth($values, 3) {
        #{$bottom}: nth($values, 3);
      }
      @if nth($values, 2) {
        #{$left}: nth($values, 2);
      }
    } @else if length($values) == 4 {
      @if nth($values, 3) {
        #{$bottom}: nth($values, 3);
      }
      @if nth($values, 4) {
        #{$left}: nth($values, 4);
      }
    }
  } @else {
    #{$all}: $values;
  }
}

// Set padding
@mixin padding($values) {
  @include _directional-property(padding, null, $values);
}

// Set margin
@mixin margin($values) {
  @include _directional-property(margin, null, $values);
}

// Create fluid responsive sizes.
@mixin fluid($type, $min-size, $max-size, $min-vw, $max-vw) {
  #{$type}: #{$min-size};

  @media only screen and (min-width: #{$min-vw}) {
    #{$type}: calc(
      #{$min-size} + #{strip-unit($max-size - $min-size)} *
        ((100vw - #{$min-vw}) / #{strip-unit($max-vw - $min-vw)})
    );
  }

  @media only screen and (min-width: #{$max-vw}) {
    #{$type}: #{$max-size};
  }
}

// Create placeholder.
@mixin placeholder {
  &.placeholder {
    @content;
  }

  &:-moz-placeholder {
    @content;
  }

  &::-moz-placeholder {
    @content;
  }

  &:-ms-input-placeholder {
    @content;
  }

  &::-webkit-input-placeholder {
    @content;
  }
}

// Trigger hardware acceleration.
@mixin hardware($will-change: auto, $perspective: 1000) {
  backface-visibility: hidden;
  will-change: $will-change;
  perspective: $perspective;
}

// Maintain aspect ratio.
@mixin aspect-ratio($width: 16, $height: 9) {
  position: relative;

  &::before {
    content: '';
    position: absolute;
    width: 100%;
    padding-top: ($height / $width) * 100%;
  }

  > * {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
  }

  @supports (aspect-ratio: 16 / 9) {
    aspect-ratio: $width / $height;

    &::before {
      display: none;
      content: none !important;
    }

    > * {
      position: unset;
      top: unset;
      left: unset;
      right: unset;
      bottom: unset;
    }
  }
}

// Centering
@mixin posCenter($horizontal: true, $vertical: true) {
  position: absolute;

  @if ($horizontal and $vertical) {
    top: 50%;
    transform: translateY(-50%);
    left: 0;
    right: 0;
    margin: 0 auto;
  } @else if ($horizontal) {
    left: 0;
    right: 0;
    margin: 0 auto;
  } @else if ($vertical) {
    top: 50%;
    transform: translateY(-50%);
  }
}

// Hover Detect
@mixin hover {
  @supports (hover: hover) {
    @media (hover: hover) {
      &:hover {
        @content;
      }
    }

    @media (hover: none) {
      &:focus,
      &:active {
        @content;
      }
    }
  }

  @supports not (hover: hover) {
    &:hover {
      @content;
    }
  }
}

// Call to action
@mixin cta($hover: true, $focus: true, $active: true) {
  @if $hover {
    @include hover {
      @content;
    }
  }
  @if $focus {
    &:focus {
      @content;
    }
  }
  @if $active {
    &:active {
      @content;
    }
  }
}

// Background Settings
@mixin background($size: cover, $position: center) {
  background-repeat: no-repeat;
  background-size: $size;
  background-position: $position;
}

// Background Overlay
@mixin bgOverlay($colour: #000, $alpha: 0.2) {
  &::before {
    content: '';
    @include size(100%);
    // @include posCenter;
    position: absolute;
    top: 0;
    left: 0;
    background-color: rgba($colour, $alpha);
  }
}

// Display Flex
@mixin flex($align, $justify, $direction: false, $wrap: true) {
  display: flex;

  @if $align {
    align-items: $align;
  }

  @if $justify {
    // If space-evenly is used.
    @if $justify== 'space-evenly' {
      justify-content: space-between;

      // Use fallback for Edge.
      @supports (-ms-ime-align: auto) {
        position: relative;
        &::before,
        &::after {
          position: absolute;
          content: '';
        }
      }

      // If not Edge then apply space-evenly.
      @supports not (-ms-ime-align: auto) {
        // Run space-evenly.
        justify-content: $justify;
      }
    } @else {
      // If other justify-content used.
      justify-content: $justify;
    }
  }

  @if $direction {
    @if str-index($direction, 'row') {
      @if $wrap {
        flex-flow: $direction wrap;
      } @else {
        flex-direction: $direction;

        @media screen and (max-width: 414px) {
          @if $direction== 'row' {
            flex-direction: column;
          } @else if $direction== 'row-reverse' {
            flex-direction: column-reverse;
          }
        }

        flex-wrap: nowrap;
      }
    } @else {
      flex-direction: $direction;
      flex-wrap: nowrap;
    }
  }
}

// Hide so only screen readers can see it
@mixin srHide {
  position: absolute;
  clip: rect(1px, 1px, 1px, 1px);
  clip-path: inset(50%);
}

// Set the border radius
@mixin radius($tl, $tr: $tl, $bl: $tl, $br: $tl) {
  @if $tl == null {
    border-radius: 0 #{$tr} #{$bl} #{$br};
  } @else if $tr == null {
    border-radius: #{$tr} 0 #{$bl} #{$br};
  } @else if $bl == null {
    border-radius: #{$tr} #{$tr} 0 #{$br};
  } @else if $br == null {
    border-radius: #{$tr} #{$tr} #{$bl} 0;
  } @else {
    border-radius: #{$tr} #{$tr} #{$bl} #{$br};
  }
}

// Set the box shadow
@mixin shadow(
  $hoffset: 0,
  $voffset: 0,
  $blur: 0,
  $spread: 0,
  $colour: v(clr-neutral-600)
) {
  box-shadow: #{$hoffset}px #{$voffset}px #{$blur}px #{$spread}px $colour;
}

// Set opacity
@mixin opacity($opacity, $fallback: false) {
  opacity: $opacity;
  @if fallback {
    $opacity-ie: $opacity * 100;
    filter: alpha(opacity = $opacity-ie); //IE8
  }
}

// Create keyframes
@mixin keyframes($name) {
  @-webkit-keyframes #{$name} {
    @content;
  }

  @-moz-keyframes #{$name} {
    @content;
  }

  @keyframes #{$name} {
    @content;
  }
}

// Create font-face
@mixin font-face(
  $font-name,
  $file-name,
  $locals: (0, 0),
  $weight: 400,
  $style: normal,
  $display: swap,
  $fallback: false
) {
  @font-face {
    font-family: string.quote($font-name);
    font-weight: $weight;
    font-style: $style;
    font-display: $display;

    @if ($fallback) {
      src: url($file-name + '.eot');

      @if (nth($locals, 1) !=0 and nth($locals, 2) !=0) {
        src: local(quote(nth($locals, 1))), local(quote(nth($locals, 2))),
          url($file-name + '.eot?#iefix') format('embedded-opentype'),
          url($file-name + '.woff2') format('woff2'),
          url($file-name + '.woff') format('woff'),
          url($file-name + '.ttf') format('truetype'),
          url($file-name + '.svg##{$font-name}') format('svg');
      } @else {
        src: url($file-name + '.eot?#iefix') format('embedded-opentype'),
          url($file-name + '.woff2') format('woff2'),
          url($file-name + '.woff') format('woff'),
          url($file-name + '.ttf') format('truetype'),
          url($file-name + '.svg##{$font-name}') format('svg');
      }
    } @else {
      @if (nth($locals, 1) !=0 and nth($locals, 2) !=0) {
        src: local(quote(nth($locals, 1))), local(quote(nth($locals, 2))),
          url($file-name + '.woff2') format('woff2'),
          url($file-name + '.woff') format('woff');
      } @else {
        src: url($file-name + '.woff2') format('woff2'),
          url($file-name + '.woff') format('woff');
      }
    }
  }
}
