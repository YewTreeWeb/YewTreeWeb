@use 'sass:math';

// Get value from nested maps
@function map-deep-get($map, $keys...) {
  @each $key in $keys {
    $map: map-get($map, $key);
  }
  @return $map;
}

// Access CSS variables
@function v($name) {
  @return var(--#{$name});
}

/// Remove the unit of a length
/// @param {Number} $number - Number to remove unit from
/// @return {Number} - Unitless number
@function strip-unit($number) {
  @if type-of($number) == 'number' and not unitless($number) {
    @return math.div($number, ($number * 0 + 1));
  }

  @return $number;
}

// Transforms shorthand to its shortest possible form.
//
// @argument {list} $values
//   List of directional values.
//
// @example scss
//   $values: _compact-shorthand(10px 20px 10px 20px);
//
//   // Output
//   $values: 10px 20px;
//
// @return {list}
//
// @access private

@function _compact-shorthand($values) {
  $output: null;

  $a: nth($values, 1);
  $b: if(length($values) < 2, $a, nth($values, 2));
  $c: if(length($values) < 3, $a, nth($values, 3));
  $d: if(length($values) < 2, $a, nth($values, if(length($values) < 4, 2, 4)));

  @if $a==0 {
    $a: 0;
  }

  @if $b==0 {
    $b: 0;
  }

  @if $c==0 {
    $c: 0;
  }

  @if $d==0 {
    $d: 0;
  }

  @if $a==$b and $a==$c and $a==$d {
    $output: $a;
  } @else if $a==$c and $b==$d {
    $output: $a $b;
  } @else if $b==$d {
    $output: $a $b $c;
  } @else {
    $output: $a $b $c $d;
  }

  @return $output;
}

// Checks if a list does not contain any values.
//
// @argument {list} $list
//   The list to check against.
//
// @return {boolean}
//
// @access private

@function _contains-falsy($list) {
  @each $item in $list {
    @if not $item {
      @return true;
    }
  }

  @return false;
}

// Converts px to em.
@function em($pixels, $context: 16) {
  @if (unitless($pixels)) {
    $pixels: $pixels * 1px;
  }

  @if (unitless($context)) {
    $context: $context * 1px;
  }

  @return calc($pixels / $context * 1em);
}

// Convert px to rem
@function rem($pxValue) {
  @return calc(#{stripUnit($pxValue) / stripUnit(16px)}) rem;
}
